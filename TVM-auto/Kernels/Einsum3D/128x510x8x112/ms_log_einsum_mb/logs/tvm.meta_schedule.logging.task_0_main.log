2025-07-03 10:14:12 [INFO] [task_scheduler.cc:166] Initializing Task #0: "main"
2025-07-03 10:14:12 [INFO] [task_scheduler.cc:41] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(G: T.Buffer((8, 128, 112), "float32"), X: T.Buffer((510, 8, 112), "float32"), Out: T.Buffer((128, 510), "float32")):
        T.func_attr({"tir.noalias": True})
        # with T.block("root"):
        for mm, bb, red_n, red_k in T.grid(128, 510, 8, 112):
            with T.block("Out"):
                v_mm, v_bb, v_red_n, v_red_k = T.axis.remap("SSRR", [mm, bb, red_n, red_k])
                T.reads(G[v_red_n, v_mm, v_red_k], X[v_bb, v_red_n, v_red_k])
                T.writes(Out[v_mm, v_bb])
                with T.init():
                    Out[v_mm, v_bb] = T.float32(0.0)
                Out[v_mm, v_bb] = Out[v_mm, v_bb] + G[v_red_n, v_mm, v_red_k] * X[v_bb, v_red_n, v_red_k]
2025-07-03 10:14:12 [INFO] [task_scheduler.cc:170] Total 3 design space(s) generated
2025-07-03 10:14:12 [INFO] [task_scheduler.cc:176] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(G: T.Buffer((8, 128, 112), "float32"), X: T.Buffer((510, 8, 112), "float32"), Out: T.Buffer((128, 510), "float32")):
        T.func_attr({"tir.noalias": True})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            Out_global = T.alloc_buffer((128, 510))
            for mm_0, bb_0, mm_1, bb_1 in T.grid(2, 6, 4, 5):
                for red_n_0, red_k_0, mm_2, bb_2, red_n_1, red_k_1, mm_3, bb_3 in T.grid(2, 56, 2, 17, 4, 2, 8, 1):
                    with T.block("Out"):
                        v_mm = T.axis.spatial(128, mm_0 * 64 + mm_1 * 16 + mm_2 * 8 + mm_3)
                        v_bb = T.axis.spatial(510, bb_0 * 85 + bb_1 * 17 + bb_2 + bb_3)
                        v_red_n = T.axis.reduce(8, red_n_0 * 4 + red_n_1)
                        v_red_k = T.axis.reduce(112, red_k_0 * 2 + red_k_1)
                        T.reads(G[v_red_n, v_mm, v_red_k], X[v_bb, v_red_n, v_red_k])
                        T.writes(Out_global[v_mm, v_bb])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            Out_global[v_mm, v_bb] = T.float32(0.0)
                        Out_global[v_mm, v_bb] = Out_global[v_mm, v_bb] + G[v_red_n, v_mm, v_red_k] * X[v_bb, v_red_n, v_red_k]
                for ax0, ax1 in T.grid(16, 17):
                    with T.block("Out_global"):
                        v0 = T.axis.spatial(128, mm_0 * 64 + mm_1 * 16 + ax0)
                        v1 = T.axis.spatial(510, bb_0 * 85 + bb_1 * 17 + ax1)
                        T.reads(Out_global[v0, v1])
                        T.writes(Out[v0, v1])
                        Out[v0, v1] = Out_global[v0, v1]
b0 = sch.get_block(name="Out", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5 = sch.get_loops(block=b0)
v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[2, 4, 2, 8])
l10, l11, l12, l13 = sch.split(loop=l2, factors=[v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[6, 5, 17, 1])
l18, l19, l20, l21 = sch.split(loop=l3, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23 = sch.sample_perfect_tile(loop=l4, n=2, max_innermost_factor=64, decision=[2, 4])
l24, l25 = sch.split(loop=l4, factors=[v22, v23], preserve_unit_iters=True, disable_predication=False)
v26, v27 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[56, 2])
l28, l29 = sch.split(loop=l5, factors=[v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l18, l11, l19, l24, l28, l12, l20, l25, l29, l13, l21)
b30 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b30, loop=l19, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v31 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v31)
2025-07-03 10:14:12 [INFO] [task_scheduler.cc:176] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(G: T.Buffer((8, 128, 112), "float32"), X: T.Buffer((510, 8, 112), "float32"), Out: T.Buffer((128, 510), "float32")):
        T.func_attr({"tir.noalias": True})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            Out_global = T.alloc_buffer((128, 510))
            for mm_0, bb_0 in T.grid(2, 6):
                for mm_1, bb_1, red_n_0, red_k_0, mm_2, bb_2, red_n_1, red_k_1, mm_3, bb_3 in T.grid(4, 5, 2, 56, 2, 17, 4, 2, 8, 1):
                    with T.block("Out"):
                        v_mm = T.axis.spatial(128, mm_0 * 64 + mm_1 * 16 + mm_2 * 8 + mm_3)
                        v_bb = T.axis.spatial(510, bb_0 * 85 + bb_1 * 17 + bb_2 + bb_3)
                        v_red_n = T.axis.reduce(8, red_n_0 * 4 + red_n_1)
                        v_red_k = T.axis.reduce(112, red_k_0 * 2 + red_k_1)
                        T.reads(G[v_red_n, v_mm, v_red_k], X[v_bb, v_red_n, v_red_k])
                        T.writes(Out_global[v_mm, v_bb])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            Out_global[v_mm, v_bb] = T.float32(0.0)
                        Out_global[v_mm, v_bb] = Out_global[v_mm, v_bb] + G[v_red_n, v_mm, v_red_k] * X[v_bb, v_red_n, v_red_k]
                for ax0, ax1 in T.grid(64, 85):
                    with T.block("Out_global"):
                        v0 = T.axis.spatial(128, mm_0 * 64 + ax0)
                        v1 = T.axis.spatial(510, bb_0 * 85 + ax1)
                        T.reads(Out_global[v0, v1])
                        T.writes(Out[v0, v1])
                        Out[v0, v1] = Out_global[v0, v1]
b0 = sch.get_block(name="Out", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5 = sch.get_loops(block=b0)
v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[2, 4, 2, 8])
l10, l11, l12, l13 = sch.split(loop=l2, factors=[v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[6, 5, 17, 1])
l18, l19, l20, l21 = sch.split(loop=l3, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23 = sch.sample_perfect_tile(loop=l4, n=2, max_innermost_factor=64, decision=[2, 4])
l24, l25 = sch.split(loop=l4, factors=[v22, v23], preserve_unit_iters=True, disable_predication=False)
v26, v27 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[56, 2])
l28, l29 = sch.split(loop=l5, factors=[v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l18, l11, l19, l24, l28, l12, l20, l25, l29, l13, l21)
b30 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b30, loop=l18, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v31 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v31)
2025-07-03 10:14:12 [INFO] [task_scheduler.cc:176] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(G: T.Buffer((8, 128, 112), "float32"), X: T.Buffer((510, 8, 112), "float32"), Out: T.Buffer((128, 510), "float32")):
        T.func_attr({"tir.noalias": True})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            for mm_0, bb_0, mm_1, bb_1, red_n_0, red_k_0, mm_2, bb_2, red_n_1, red_k_1, mm_3, bb_3 in T.grid(2, 6, 4, 5, 2, 56, 2, 17, 4, 2, 8, 1):
                with T.block("Out"):
                    v_mm = T.axis.spatial(128, mm_0 * 64 + mm_1 * 16 + mm_2 * 8 + mm_3)
                    v_bb = T.axis.spatial(510, bb_0 * 85 + bb_1 * 17 + bb_2 + bb_3)
                    v_red_n = T.axis.reduce(8, red_n_0 * 4 + red_n_1)
                    v_red_k = T.axis.reduce(112, red_k_0 * 2 + red_k_1)
                    T.reads(G[v_red_n, v_mm, v_red_k], X[v_bb, v_red_n, v_red_k])
                    T.writes(Out[v_mm, v_bb])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        Out[v_mm, v_bb] = T.float32(0.0)
                    Out[v_mm, v_bb] = Out[v_mm, v_bb] + G[v_red_n, v_mm, v_red_k] * X[v_bb, v_red_n, v_red_k]
b0 = sch.get_block(name="Out", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5 = sch.get_loops(block=b0)
v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[2, 4, 2, 8])
l10, l11, l12, l13 = sch.split(loop=l2, factors=[v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[6, 5, 17, 1])
l18, l19, l20, l21 = sch.split(loop=l3, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23 = sch.sample_perfect_tile(loop=l4, n=2, max_innermost_factor=64, decision=[2, 4])
l24, l25 = sch.split(loop=l4, factors=[v22, v23], preserve_unit_iters=True, disable_predication=False)
v26, v27 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[56, 2])
l28, l29 = sch.split(loop=l5, factors=[v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l18, l11, l19, l24, l28, l12, l20, l25, l29, l13, l21)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v30 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v30)
